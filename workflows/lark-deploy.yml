name: Reusable Lark Approval Deploy

on:
  workflow_call:
    inputs:
      project_type:
        required: true
        type: string
        description: "È°πÁõÆÁ±ªÂûã: worker Êàñ pages"
      project_name:
        required: true
        type: string
        description: "È°πÁõÆÂêçÁß∞"
      version:
        required: false
        type: string
        default: "latest"
        description: "ÁâàÊú¨Âè∑"
      change_log:
        required: false
        type: string
        default: ""
        description: "ÂèòÊõ¥ËØ¥Êòé"
    secrets:
      LARK_APP_ID:
        required: true
      LARK_APP_SECRET:
        required: true
      LARK_CHAT_ID:
        required: true
      APPROVAL_CALLBACK_BASE:
        required: true
      CALLBACK_SIGN:
        required: true

permissions:
  contents: read
  actions: write
  issues: write

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build
        run: echo "Build ${{ inputs.project_name }} version=${{ inputs.version }}"
      - name: Test
        run: echo "Run tests..."

  create_gate:
    needs: build_and_test
    runs-on: ubuntu-latest
    outputs:
      issue_number: ${{ steps.mk.outputs.issue_number }}
      issue_url: ${{ steps.mk.outputs.issue_url }}
    steps:
      - name: Create approval issue
        id: mk
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const title = `[${{ inputs.project_name }}] Production ÂèëÂ∏ÉÂÆ°Êâπ - ${{ inputs.version }}`;
            const body = [
              `### üìã ÂèëÂ∏É‰ø°ÊÅØ`,
              `- **È°πÁõÆ**: ${{ inputs.project_name }}`,
              `- **Á±ªÂûã**: ${{ inputs.project_type }}`,
              `- **ÁâàÊú¨**: ${{ inputs.version }}`,
              `- **ËØ¥Êòé**: ${{ inputs.change_log || "Êó†" }}`,
              `- **Ëß¶ÂèëËÄÖ**: @${context.actor}`,
              "",
              `_ËØ∑Âú®È£û‰π¶ÈáåÁÇπÂáªÊåâÈíÆ ÂêåÊÑè/ÊãíÁªù_`
            ].join("\n");
            const { data } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body
            });
            core.setOutput("issue_number", String(data.number));
            core.setOutput("issue_url", data.html_url);

  notify_approval:
    needs: create_gate
    runs-on: ubuntu-latest
    env:
      LARK_APP_ID: ${{ secrets.LARK_APP_ID }}
      LARK_APP_SECRET: ${{ secrets.LARK_APP_SECRET }}
      LARK_CHAT_ID: ${{ secrets.LARK_CHAT_ID }}
      CALLBACK_BASE: ${{ secrets.APPROVAL_CALLBACK_BASE }}
      CALLBACK_SIGN: ${{ secrets.CALLBACK_SIGN }}
    steps:
      - name: Ensure jq
        run: |
          command -v jq >/dev/null 2>&1 || {
            sudo apt-get update -y >/dev/null
            sudo apt-get install -y jq >/dev/null
          }

      - name: Get tenant_access_token
        id: tat
        shell: bash
        run: |
          TAT="$(curl -sS -X POST 'https://open.larksuite.com/open-apis/auth/v3/tenant_access_token/internal' \
            -H 'Content-Type: application/json; charset=utf-8' \
            -d "{\"app_id\":\"$LARK_APP_ID\",\"app_secret\":\"$LARK_APP_SECRET\"}" | jq -r '.tenant_access_token')"
          test -n "$TAT" && [ "$TAT" != "null" ] || { echo "get TAT failed"; exit 1; }
          echo "token=$TAT" >> $GITHUB_OUTPUT

      - name: Send card with URL
        id: send
        shell: bash
        env:
          TAT: ${{ steps.tat.outputs.token }}
        run: |
          set -euo pipefail
          
          BASE="${CALLBACK_BASE%%#*}"
          BASE="${BASE%%[[:space:]]*}"
          BASE="${BASE%/}"
          REPO="${{ github.repository }}"
          REPO_ENC="${REPO//\//%2F}"
          
          # ÂÖàÂèëÈÄÅÂç†‰ΩçÂç°Áâá
          CARD_JSON=$(cat <<'EOF'
          {
            "config": { "wide_screen_mode": true },
            "header": {
              "title": { "tag": "plain_text", "content": "üö¶ Áîü‰∫ßÂèëÂ∏ÉÂÆ°Êâπ" },
              "template": "orange"
            },
            "elements": [
              {
                "tag": "markdown",
                "content": "**È°πÁõÆ**: ${{ inputs.project_name }}\n**‰ªìÂ∫ì**: ${{ github.repository }}\n**ÁâàÊú¨**: ${{ inputs.version }}\n**Á±ªÂûã**: ${{ inputs.project_type }}\n**ÂèòÊõ¥**: ${{ inputs.change_log || 'Êó†' }}\n**Issue**: [#${{ needs.create_gate.outputs.issue_number }}](${{ needs.create_gate.outputs.issue_url }})"
              },
              {
                "tag": "action",
                "actions": [
                  { "tag": "button", "text": { "tag": "plain_text", "content": "‚úÖ ÂêåÊÑè" }, "type": "primary", "url": "about:blank" },
                  { "tag": "button", "text": { "tag": "plain_text", "content": "‚ùå ÊãíÁªù" }, "type": "danger", "url": "about:blank" }
                ]
              }
            ]
          }
          EOF
          )
          
          POST_RESP=$(curl -sS -X POST 'https://open.larksuite.com/open-apis/im/v1/messages?receive_id_type=chat_id' \
            -H "Authorization: Bearer ${TAT}" \
            -H 'Content-Type: application/json; charset=utf-8' \
            -d "{
              \"receive_id\": \"${LARK_CHAT_ID}\",
              \"msg_type\": \"interactive\",
              \"content\": $(echo "$CARD_JSON" | jq -Rs .)
            }")
          
          CODE=$(echo "$POST_RESP" | jq -r '.code')
          test "$CODE" = "0" || { echo "send failed: $POST_RESP"; exit 1; }
          
          MID=$(echo "$POST_RESP" | jq -r '.data.message_id')
          echo "mid=$MID" >> $GITHUB_OUTPUT
          
          # Êõ¥Êñ∞‰∏∫ÁúüÂÆûURL
          APPROVE_URL="${BASE}/approve?repo=${REPO_ENC}&issue=${{ needs.create_gate.outputs.issue_number }}&s=${CALLBACK_SIGN}&mid=${MID}"
          REJECT_URL="${BASE}/reject?repo=${REPO_ENC}&issue=${{ needs.create_gate.outputs.issue_number }}&s=${CALLBACK_SIGN}&mid=${MID}"
          
          CARD_JSON2=$(cat <<EOF
          {
            "config": { "wide_screen_mode": true },
            "header": {
              "title": { "tag": "plain_text", "content": "üö¶ Áîü‰∫ßÂèëÂ∏ÉÂÆ°Êâπ" },
              "template": "orange"
            },
            "elements": [
              {
                "tag": "markdown",
                "content": "**È°πÁõÆ**: ${{ inputs.project_name }}\n**‰ªìÂ∫ì**: ${{ github.repository }}\n**ÁâàÊú¨**: ${{ inputs.version }}\n**Á±ªÂûã**: ${{ inputs.project_type }}\n**ÂèòÊõ¥**: ${{ inputs.change_log || 'Êó†' }}\n**Issue**: [#${{ needs.create_gate.outputs.issue_number }}](${{ needs.create_gate.outputs.issue_url }})"
              },
              {
                "tag": "action",
                "actions": [
                  { "tag": "button", "text": { "tag": "plain_text", "content": "‚úÖ ÂêåÊÑè" }, "type": "primary", "url": "${APPROVE_URL}" },
                  { "tag": "button", "text": { "tag": "plain_text", "content": "‚ùå ÊãíÁªù" }, "type": "danger", "url": "${REJECT_URL}" }
                ]
              }
            ]
          }
          EOF
          )
          
          PATCH_RESP=$(curl -sS -X PATCH "https://open.larksuite.com/open-apis/im/v1/messages/${MID}" \
            -H "Authorization: Bearer ${TAT}" \
            -H 'Content-Type: application/json; charset=utf-8' \
            -d "{\"content\": $(echo "$CARD_JSON2" | jq -Rs .)}")
          
          PCODE=$(echo "$PATCH_RESP" | jq -r '.code')
          test "$PCODE" = "0" || { echo "update failed: $PATCH_RESP"; exit 1; }

  wait_for_approval:
    needs: [create_gate, notify_approval]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      result: ${{ steps.wait.outputs.result }}
    steps:
      - name: Wait for approve/reject comment
        id: wait
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const issue_number = Number("${{ needs.create_gate.outputs.issue_number }}");
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const APPROVED = ["approve","approved"];
            const DENIED = ["reject","rejected"];
            const timeoutMs = 30 * 60 * 1000;
            const intervalMs = 10 * 1000;
            const start = Date.now();
            
            while (Date.now() - start < timeoutMs) {
              const { data: comments } = await github.rest.issues.listComments({
                owner, repo, issue_number, per_page: 100
              });
              for (const c of comments.reverse()) {
                const text = (c.body || "").toLowerCase();
                if (APPROVED.some(w => text.includes(w))) {
                  core.setOutput("result", "approved");
                  core.info(`Approved by @${c.user?.login} ‚úÖ`);
                  return;
                }
                if (DENIED.some(w => text.includes(w))) {
                  core.setOutput("result", "denied");
                  core.setFailed(`Denied by @${c.user?.login} ‚ùå`);
                  return;
                }
              }
              await new Promise(r => setTimeout(r, intervalMs));
            }
            core.setFailed("Approval timeout ‚è∞");

  deploy:
    needs: wait_for_approval
    if: needs.wait_for_approval.outputs.result == 'approved'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Deploy placeholder
        run: |
          echo "Deploying ${{ inputs.project_name }} (${{ inputs.project_type }}) version=${{ inputs.version }}"
          echo "Note: Actual deployment will be handled by each project's workflow"

  notify_result:
    needs: [deploy, wait_for_approval]
    if: always()
    runs-on: ubuntu-latest
    env:
      LARK_APP_ID: ${{ secrets.LARK_APP_ID }}
      LARK_APP_SECRET: ${{ secrets.LARK_APP_SECRET }}
      LARK_CHAT_ID: ${{ secrets.LARK_CHAT_ID }}
    steps:
      - name: Send final notification
        shell: bash
        run: |
          TAT="$(curl -sS -X POST 'https://open.larksuite.com/open-apis/auth/v3/tenant_access_token/internal' \
            -H 'Content-Type: application/json; charset=utf-8' \
            -d "{\"app_id\":\"$LARK_APP_ID\",\"app_secret\":\"$LARK_APP_SECRET\"}" | jq -r '.tenant_access_token')"
          
          status="${{ needs.wait_for_approval.outputs.result == 'approved' && needs.deploy.result == 'success' && '‚úÖ ÊàêÂäü' || '‚ùå Â§±Ë¥•' }}"
          project="${{ inputs.project_name }}"
          
          curl -sS -X POST 'https://open.larksuite.com/open-apis/im/v1/messages?receive_id_type=chat_id' \
            -H "Authorization: Bearer ${TAT}" \
            -H 'Content-Type: application/json; charset=utf-8' \
            -d "{
              \"receive_id\": \"${LARK_CHAT_ID}\",
              \"msg_type\": \"text\",
              \"content\": \"{\\\"text\\\":\\\"[${project}] ÈÉ®ÁΩ≤ ${status} - ÁâàÊú¨: ${{ inputs.version }}\\\"}\"
            }"
